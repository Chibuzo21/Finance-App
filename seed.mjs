import { createClient } from "@supabase/supabase-js";
import dotenv from "dotenv";
import { faker } from "@faker-js/faker";

dotenv.config({ path: ".env.local" });

// we need to specify the path to our environmemt variable

const supabase = createClient(
  process.env.NEXT_PUBLIC_SUPABASE_URL,
  process.env.SUPABASE_SERVICE_ROLE
  // The essence of the supabase-service-role here is so that it can override every row level security to enable us to be able to read, insert all the rows we want
);
// A new client is always needed for a route and that is what createClient does for us here. It makes use of 2 parameters, the supabase URL and supabase anon key. createClient is not specific to the server or client side. it serves as a means of connection to supabase

const categories = [
  "Housing",
  "Transport",
  "Health",
  "Food",
  "Education",
  "Other",
];
async function seedUsers() {
  //  This function is used to create fake accounts with the for loop
  for (let i = 0; i < 5; i++) {
    try {
      const { data, error } = await supabase.auth.admin.createUser({
        email: faker.internet.email(),
        password: "example-password",
      });
      if (error) throw new Error(error);
      console.log("user added");
    } catch (error) {
      console.error(`Error adding user`);
    }
  }
}
// The seed function is used in conjunction with the fakerjs installed to generate fake data for a start. we use the for loop to generate 10 of them
async function seed() {
  await seedUsers();
  let transactions = [];
  const {
    data: { users },
    error: listUsersError,
  } = await supabase.auth.admin.listUsers();
  // This is used to fetch all the authenticated users
  if (listUsersError) {
    console.error(`Error listing users, aborting`);
    return;
    // return helps to end the code flow
  }
  const userIds = users?.map((user) => user.id);
  for (let i = 0; i < 10; i++) {
    const created_at = faker.date.past();
    // faker.date.past helps us to generate a date in the last year, we can also use date.recent for date in the last day and date.soon for the next day and date.future for the next year.
    let type,
      category = null;
    const user_id = faker.helpers.arrayElement(userIds);
    const typeBias = Math.random();
    // Math.random returns a random decimal number (floats) between 0 and 1
    if (typeBias < 0.8) {
      type = "Expenses";
      category = faker.helpers.arrayElement(categories);
      //   faker.helpers.arrayElement returns a random element from a speified array(In this case is categories)
    } else if (typeBias < 0.9) {
      type = "Income";
    } else {
      type = faker.helpers.arrayElement(["Savings", "Investment"]);
    }
    let amount;
    switch (type) {
      case "Income":
        amount = faker.number.int({
          // faker.number.int() is used to generate random integers
          min: 2000,
          max: 9000,
        });
      case "Expenses":
        amount = faker.number.int({
          min: 10,
          max: 1000,
        });
      case "Investment":
      case "Savings":
        amount = faker.number.int({
          min: 3000,
          max: 10000,
        });
        // both Investment and Savings will both have different figures generated by the faker but still between 3000 and 10000
        // Since no break is inserted after invetment, it still returns the amount value (stated in the savings case) when the type is Investemt
        break;
    }
    transactions.push({
      amount,
      created_at,
      type,
      category,
      description: faker.lorem.sentence(),
      user_id,
      //   faker.lorem.sentence generates a random sentence made up of a few random worads usually 5-15 words long
    });
  }
  const { error } = await supabase.from("transactions").insert(transactions);
  //   insert([..]) provides an array of objects each representing a new row. This insert is used to add a new data ie rows into a table in your supabase database
  if (error) {
    console.error("Error inserting data");
  } else {
    console.log(`${transactions.length} transactions is inserted`);
  }
}
seed().catch(console.error);
